import org.gradle.api.JavaVersion

plugins {
    id 'java'
}

version = '0.1.0'
group = 'com.behamotten'

def javaExtension = extensions.findByName('java')
if (javaExtension != null) {
    Class<?> javaLanguageVersionClass = null
    try {
        javaLanguageVersionClass = Class.forName('org.gradle.jvm.toolchain.JavaLanguageVersion')
    } catch (ClassNotFoundException ignored) {
        // Gradle versions without toolchain support do not ship this class
    }

    if (javaLanguageVersionClass != null && javaExtension.metaClass.respondsTo(javaExtension, 'toolchain', Closure)) {
        javaExtension.toolchain { spec ->
            spec.languageVersion = javaLanguageVersionClass.getMethod('of', Integer.TYPE).invoke(null, 21)
        }
    } else {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    if (javaExtension.metaClass.respondsTo(javaExtension, 'withSourcesJar')) {
        javaExtension.withSourcesJar()
    } else {
        tasks.register('sourcesJar', Jar) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }
        artifacts {
            archives tasks.named('sourcesJar')
        }
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    stubs {
        java.srcDir('src/stubs/java')
    }
    main {
        compileClasspath += sourceSets.stubs.output
    }
}

dependencies {
    compileOnly sourceSets.stubs.output
}

def taskContainer = tasks
if (taskContainer.metaClass.respondsTo(taskContainer, 'named', Object[])) {
    taskContainer.named('compileJava') {
        dependsOn 'compileStubsJava'
    }
} else {
    taskContainer.getByName('compileJava').dependsOn 'compileStubsJava'
}

def javaCompileTasks = tasks.withType(JavaCompile)
if (javaCompileTasks.metaClass.respondsTo(javaCompileTasks, 'configureEach', Closure)) {
    javaCompileTasks.configureEach {
        options.encoding = 'UTF-8'
        if (options.metaClass.respondsTo(options, 'setRelease', Object)) {
            options.release = 21
        }
    }
} else if (javaCompileTasks.metaClass.respondsTo(javaCompileTasks, 'all', Closure)) {
    javaCompileTasks.all {
        options.encoding = 'UTF-8'
    }
} else {
    javaCompileTasks.each { task ->
        task.options.encoding = 'UTF-8'
    }
}

def configureJarTask = { Jar jarTask ->
    if (jarTask.metaClass.respondsTo(jarTask, 'setArchiveBaseName', String)) {
        jarTask.setArchiveBaseName('behamotten-event-tools')
    } else if (jarTask.metaClass.hasProperty(jarTask, 'archiveBaseName')) {
        def archiveBaseNameProperty = jarTask.archiveBaseName
        if (archiveBaseNameProperty != null && archiveBaseNameProperty.metaClass.respondsTo(archiveBaseNameProperty, 'set', Object)) {
            archiveBaseNameProperty.set('behamotten-event-tools')
        } else {
            jarTask.archiveBaseName = 'behamotten-event-tools'
        }
    } else if (jarTask.metaClass.hasProperty(jarTask, 'baseName')) {
        jarTask.baseName = 'behamotten-event-tools'
    }

    jarTask.manifest {
        attributes(
            'Specification-Title': 'Behamotten Event Tools',
            'Specification-Vendor': 'Behamotten',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Behamotten'
        )
    }
}

boolean jarConfigured = false

if (taskContainer.metaClass.respondsTo(taskContainer, 'named', String, Class)) {
    def jarTaskProvider = taskContainer.named('jar', Jar)
    if (jarTaskProvider.metaClass.respondsTo(jarTaskProvider, 'configure', Closure)) {
        jarTaskProvider.configure(configureJarTask)
        jarConfigured = true
    } else if (jarTaskProvider.metaClass.respondsTo(jarTaskProvider, 'get')) {
        configureJarTask.call(jarTaskProvider.get())
        jarConfigured = true
    }
}

if (!jarConfigured && taskContainer.metaClass.respondsTo(taskContainer, 'named', Object[])) {
    try {
        def jarTaskProvider = taskContainer.named('jar')
        if (jarTaskProvider != null) {
            if (jarTaskProvider.metaClass.respondsTo(jarTaskProvider, 'configure', Closure)) {
                jarTaskProvider.configure(configureJarTask)
                jarConfigured = true
            } else if (jarTaskProvider.metaClass.respondsTo(jarTaskProvider, 'get')) {
                def jarTask = jarTaskProvider.get()
                if (jarTask instanceof Jar) {
                    configureJarTask.call(jarTask)
                    jarConfigured = true
                }
            }
        }
    } catch (MissingMethodException ignored) {
        // Older Gradle versions may not support this overload
    }
}

if (!jarConfigured && taskContainer.metaClass.respondsTo(taskContainer, 'getByName', String, Closure)) {
    taskContainer.getByName('jar') { Jar jarTask ->
        configureJarTask.call(jarTask)
    }
    jarConfigured = true
}

if (!jarConfigured) {
    def jarTask = taskContainer.getByName('jar')
    if (jarTask instanceof Jar) {
        configureJarTask.call(jarTask)
        jarConfigured = true
    }
}
