import org.gradle.api.tasks.bundling.Jar

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}

version = '0.1.0'
group = 'com.behamotten'

def registerFallbackSourcesJar = { proj ->
    def existing = proj.tasks.findByName('sourcesJar')
    if (existing != null) {
        return proj.tasks.named('sourcesJar', Jar)
    }

    proj.tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from(proj.sourceSets.main.allSource)
    }
}

def configureJavaAndSourcesJar = { proj ->
    def result = [
        sourcesJarProvider   : null,
        usingFallbackSources : false
    ]

    Class<?> javaExtensionClass = null
    try {
        javaExtensionClass = Class.forName('org.gradle.api.plugins.JavaPluginExtension')
    } catch (Throwable ignored) {
        javaExtensionClass = null
    }

    def javaExtension = javaExtensionClass != null ? proj.extensions.findByType(javaExtensionClass) : null

    if (javaExtension != null) {
        if (javaExtension.metaClass.respondsTo(javaExtension, 'getToolchain')) {
            javaExtension.toolchain.languageVersion = JavaLanguageVersion.of(21)
        }

        if (javaExtension.metaClass.respondsTo(javaExtension, 'withSourcesJar')) {
            javaExtension.withSourcesJar()
            result.sourcesJarProvider = proj.tasks.named('sourcesJar', Jar)
            return result
        }
    }

    result.usingFallbackSources = true
    result.sourcesJarProvider = registerFallbackSourcesJar(proj)
    return result
}

repositories {
    mavenCentral()
    maven {
        name = 'NeoForge'
        url = uri('https://maven.neoforged.net/releases')
    }
}

sourceSets {
    stubs {
        java.srcDir('src/stubs/java')
    }
    main {
        compileClasspath += sourceSets.stubs.output
    }
}

def sourcesJarSetup = configureJavaAndSourcesJar(project)
def sourcesJarProvider = sourcesJarSetup.sourcesJarProvider
def usingFallbackSources = sourcesJarSetup.usingFallbackSources

dependencies {
    compileOnly sourceSets.stubs.output
}

tasks.named('compileJava').configure {
    dependsOn(tasks.named('compileStubsJava'))
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    archiveBaseName.set('behamotten-event-tools')
    from(sourceSets.main.output)
    manifest {
        attributes(
            'Specification-Title': 'Behamotten Event Tools',
            'Specification-Vendor': 'Behamotten',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Behamotten'
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            if (usingFallbackSources && sourcesJarProvider != null) {
                artifact sourcesJarProvider
            }
        }
    }
}
