import org.gradle.api.JavaVersion

plugins {
    id 'java'
}

version = '0.1.0'
group = 'com.behamotten'

def javaExtension = extensions.findByName('java')
if (javaExtension != null) {
    Class<?> javaLanguageVersionClass = null
    try {
        javaLanguageVersionClass = Class.forName('org.gradle.jvm.toolchain.JavaLanguageVersion')
    } catch (ClassNotFoundException ignored) {
        // Gradle versions without toolchain support do not ship this class
    }

    if (javaLanguageVersionClass != null && javaExtension.metaClass.respondsTo(javaExtension, 'toolchain', Closure)) {
        javaExtension.toolchain { spec ->
            spec.languageVersion = javaLanguageVersionClass.getMethod('of', Integer.TYPE).invoke(null, 21)
        }
    } else {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    if (javaExtension.metaClass.respondsTo(javaExtension, 'withSourcesJar')) {
        javaExtension.withSourcesJar()
    } else {
        tasks.register('sourcesJar', Jar) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }
        artifacts {
            archives tasks.named('sourcesJar')
        }
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    stubs {
        java.srcDir('src/stubs/java')
    }
    main {
        compileClasspath += sourceSets.stubs.output
    }
}

dependencies {
    compileOnly sourceSets.stubs.output
}

tasks.named('compileJava') {
    dependsOn 'compileStubsJava'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    archiveBaseName.set('behamotten-event-tools')
    manifest {
        attributes(
            'Specification-Title': 'Behamotten Event Tools',
            'Specification-Vendor': 'Behamotten',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Behamotten'
        )
    }
}
